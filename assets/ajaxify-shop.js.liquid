/**
 * Shopify Ajaxify Shop. 
 * 
 * @uses Modified Shopify jQuery API (link to it)
 *
 */

jQuery(document).ready(function() { 
//Begin Wrapper

var jQ = jQuery;

/**
 * Collection of Selectors for various pieces on the page we need to update 
 *
 * I've tried to keep these as general and flexible as possible, but 
 * if you are doing your own markup, you may find you need to change some of these.
 *
 */
var selectors = {
    // Any elements(s) with this selector will have the total item count put there on add to cart.
    TOTAL_ITEMS: '#main_navbar .count', 
    TOTAL_PRICE: '.cart-total-price',

    SUBMIT_ADD_TO_CART: 'input[type=image], input.submit-add-to-cart',
    
    FORM_ADD_TO_CART: 'form[action*="/cart/add"]',
    
    FORM_UPDATE_CART: 'form[name=cartform]',
    //The actual Update Button
    FORM_UPDATE_CART_BUTTON: 'form[name=cartform] input[name=update]',
    //All the buttons on the form
    FORM_UPDATE_CART_BUTTONS: 'input[type=image], input.button-update-cart',

    LINE_ITEM_ROW: '.cart-line-item',
    LINE_ITEM_QUANTITY_PREFIX: 'input#updates_',
    LINE_ITEM_PRICE_PREFIX: '.cart-line-item-price-',

    LINE_ITEM_REMOVE: '.remove a',
    
    EMPTY_CART_MESSAGE: '#empty',

    QUICK_CART_MENU: 'div.cart_menu'
};


/**
 * Collection of text strings. This is where you would change for a diff language, for example. 
 *
 */
var text = {
    ITEM: 'Item', 
    ITEMS: 'Items'
};

//Convenience method to format money. 
//Can just transform the amount here if needed
window.formatMoney = function(price) {
    return Shopify.formatMoney(price, app.data.money_format);
};


//Attach Submit Handler to all forms with the /cart/add action. 
jQ(selectors.FORM_ADD_TO_CART).submit(function(e) {
    e.preventDefault();
    //Disable the Add To Cart button, add a disabled class. 
    jQ(e.target).find(selectors.SUBMIT_ADD_TO_CART).attr('disabled', true).addClass('disabled');

    //Can't use updateCartFromForm since you need the item added before you can update (otherwise, would have been more convenient)
    //So, in onItemAdded, we Shopify.getCart() to force the repaint of items in cart. 
    Shopify.addItemFromForm(e.target);
});


//We only want to interrupt the UPDATE, not the CHECKOUT process
jQ(selectors.FORM_UPDATE_CART_BUTTON).click(function(e) {
    e.preventDefault();
    jQ(e.target.form).find(selectors.FORM_UPDATE_CART_BUTTONS).attr('disabled', true).addClass('disabled');
    Shopify.updateCartFromForm(e.target.form);
});

//Delegate the Remove Link functionality on the cart page.
jQ(selectors.FORM_UPDATE_CART).delegate(selectors.LINE_ITEM_REMOVE, 'click', function(e) {
    e.preventDefault();
    //Get the variant ID from the URL
    var vid = this.href.split('/').pop().split('?').shift();
    Shopify.removeItem(vid);
    jQ(this).parents(selectors.LINE_ITEM_ROW).remove();
});

/**
 * Shopify.showModal
 * 
 * @param string contents
 * @param integer hideDelay
 */
Shopify.modalTimer = false;
Shopify.showModal = function(contents,hideDelay) {

    if(Shopify.modalTimer){
        window.clearTimeout(Shopify.modalTimer);
    }

    //Ensure the plugin is loaded
    if(typeof $().magnificPopup !== 'function'){ return }

    //Check the function vars have been sent
    if(typeof contents === 'undefined'){ return }
    if(typeof hideDelay === 'undefined'){ var hideDelay = 7000 /* default */ }
    
    //Open the modal
    $.magnificPopup.open({
        items: {
            src: '<div class="mfp-with-anim modal-popup">'+contents+'</div>',
            type: 'inline'
        },
        mainClass: 'mfp-move-from-top',
        removalDelay: 1000
    });
    
    //Autoclose the modal
    var magnificPopup = $.magnificPopup.instance;
    Shopify.modalTimer = window.setTimeout(function(){
        if(typeof magnificPopup !== 'undefined'){
            magnificPopup.close();
        }
    }, hideDelay);

};

{% comment %}
/**
 * Shopify.addImageSize
 * 
 * @param string - the image src
 * @param size - this size to make it
 */
{% endcomment %}
Shopify.addImageSize = function(src,size){
    if(typeof size === 'undefined'){ return src; }
    if(src === null){ return {{ 'no-image.gif' | asset_url | json }} }
    size = '_' + size + '.';
    return src.replace(/.([^.]*)$/,size+'$1');
};

{% comment %}
/**
 * Shopify.updateQuickCart
 * 
 * @param object - the cart
*/
{% endcomment %}
Shopify.updateQuickCart = function(cart){
    var t = jQ(selectors.QUICK_CART_MENU);
    if(t.length){
        if(cart.items.length){

            var toAppend = [];
            for (var i = 0; i < cart.items.length; i++) {

                var itemPrice = cart.items[i].price;
                //var itemPriceConverted = Shopify.formatMoney(itemPrice);
                var itemPriceConverted = Shopify.formatMoney(itemPrice,app.data.money_format);

                {% if settings.show_multiple_currencies %}
                if(typeof Currency !== 'undefined' && shopCurrency && cookieCurrency){
                    var convertedPrice = Currency.convert(itemPrice,shopCurrency,cookieCurrency);
                    itemPriceConverted = Shopify.formatMoney(convertedPrice, Currency.moneyFormats[cookieCurrency].money_with_currency_format);
                }
                {% endif %}

                var row = '<ul><li><div class="pro_img"><a href="' + cart.items[i].url + 
                '"><img src="' + Shopify.addImageSize(cart.items[i].image,'small') + '" alt="' + cart.items[i].title + 
                '"></a></div></li><li><h5><a href="' + cart.items[i].url + 
                '" class="item-name">' + cart.items[i].title + 
                '</a></h5><p class="product-type">'+ cart.items[i].product_type +'</p></li><li><div class="price pull-right"><span class="money">'+ itemPriceConverted +
                '</span></div></li></ul>';
                toAppend.push(row);
            };
            var checkoutRow = t.find('div.checkout_row');
            if(checkoutRow.length){ /* we have existing items in the quick cart */
                t.find('div.cart_row').html(toAppend.join());
            }else{
                checkoutRow = '<div class="checkout_row clearfix"><button type="submit" name="checkout" value="Check Out" class="btn_c">{{ 'cart.general.checkout' | t }}</button><a href="/cart" class="checkout_btn">{{ 'cart.general.view_cart' | t }}</a></div>';
                var form = jQ('<form />',{
                    'action':'/cart',
                    'method':'post',
                    'novalidate':'novalidate'
                });
                form.append(toAppend.join(),checkoutRow)
                t.find('div.cart_row').html('').append(form);
            }


        }
    }

    Shopify.onCartUpdate(cart);
};


/**
 * Shopify.onItemAdded
 * 
 * Triggered by the response when something is added to the cart via the add to cart button.
 * This is where you would want to put any flash messaging, for example.
 * 
 * @param object line_item
 * @param HTMLelement/String Form HTMLElement, or selector
 */
Shopify.onItemAdded = function(line_item, form) {

    //Default behaviour for this modification:
    //When a Add To Cart form is clicked, we disable the button and apply a class of disabled. 
    //Here is where we remove the disabled class, and reactivate the button.
    jQ(form).find(selectors.SUBMIT_ADD_TO_CART).attr('disabled', false).removeClass('disabled');

    var productTitle = jQ('<div />',{'class':'modal-cart-title'}).html(line_item.title);

    //You can add any extra messaging you would want here. 
    var message = jQ('<div />',{
        'class':'modal-cart-success'
    }).html('<i class="fa fa-check"></i><span class="line-item-count hidden"></span>{{ 'cart.general.ajax_add_success' | t }}');

    if(typeof line_item.quantity !== 'undefined'){
        message.find('.line-item-count').text(line_item.quantity).removeClass('hidden');
    }

    //The buttons
    var btnCart = jQ('<a />',{
        'class':'modal-button',
        'href':'/cart'
    }).text({{ 'cart.general.view_cart' | t | json }});
    var btnCheckout = jQ('<a />',{
        'class':'modal-button2',
        'href':'/checkout'
    }).text({{ 'cart.general.checkout' | t | json }});

    var contentsWrapper = jQ('<div />',{'class':'product-contents-wrapper clearfix'});
    //Assume no image
    var image = '';
    if(typeof line_item.image !== 'undefined'){
        //If we have an image, add it
        var imageSize = 'large'; /* Bigger than what you need, but it should already be loaded */
        image = jQ('<div />',{'class':'modal-product-image'}).html('<img src="'+
        Shopify.addImageSize(line_item.image,imageSize)+'" />');
    }
    var contents = jQ('<div />').append(productTitle,message,btnCart,btnCheckout);
    contentsWrapper.append(image,contents);
    var s = contentsWrapper.wrap('<p>').parent().html();
    Shopify.showModal(s);

    //Get the state of the cart, which will trigger onCartUpdate
    Shopify.getCart(Shopify.updateQuickCart);
};



/**
 * This updates the N item/items left in your cart
 * 
 * It's setup to match the HTML used to display the Cart Count on Load. If you change that (in your theme.liquid) 
 * you will probably want to change the message html here. 
 * This will update the HTML in ANY element with the class defined in selectors.TOTAL_ITEMS
 *
 * @param object the cart object. 
 * @param HTMLElement form. If included, we know its an Update of the CART FORM, which will trigger additional behaviour. 
 */
Shopify.onCartUpdate = function(cart, form) {

    // Total Items Update
    var message = cart.item_count;
    if(cart.item_count > 0){
        jQ(selectors.TOTAL_ITEMS).text(message).removeClass('hidden');
    }else{
        jQ(selectors.TOTAL_ITEMS).text('').addClass('hidden');
    }
    

    // Price update - any element matching the selector will have their contents updated with the cart price.
    var price = window.formatMoney(cart.total_price);
    jQ(selectors.TOTAL_PRICE).html(price);

    //If the EMPTY_CART_MESSAGE element exiss, we should show it, and hide the form. 
    if( (jQ(selectors.EMPTY_CART_MESSAGE).length > 0) &&  cart.item_count == 0) {
        jQ(selectors.FORM_UPDATE_CART).hide();
        jQ(selectors.EMPTY_CART_MESSAGE).show();
    }

    // A form was passed in?
    form = form || false;
    //so it's the cart page form update, trigger behaviours for that page
    if(form) {
        //Nothing left in cart, we reveal the Nothing in cart content, hide the form.
        if(cart.item_count > 0) {
            //Loops through cart items, update the prices.
            jQ.each(cart.items, function(index, cartItem) {
                jQ(selectors.LINE_ITEM_PRICE_PREFIX + cartItem.id).html(window.formatMoney(cartItem.line_price));
                jQ(selectors.LINE_ITEM_QUANTITY_PREFIX + cartItem.id).val(cartItem.quantity);
            });

            //And remove any line items with 0
            jQ(form).find('input[value=0]').parents(selectors.LINE_ITEM_ROW).remove();

            //Since we are on the cart page, reenable the buttons we disabled
            jQ(form).find(selectors.FORM_UPDATE_CART_BUTTONS).attr('disabled', false).removeClass('disabled');

        }    
        //You can add any extra messaging you would want here. 
        //successMessage('Cart Updated.');
    }
};


Shopify.onError = function(XMLHttpRequest, textStatus) {
    var response = jQuery.parseJSON(XMLHttpRequest.responseText);
    var error = response.description;

    if(typeof $().magnificPopup !== 'function'){ 
        alert(error) ;
    }else{
        $.magnificPopup.open({
            items: {
                src: '<div class="mfp-with-anim modal-popup error"><h3>{{ "general.forms.error" | t }}</h3>'+error+'</div>',
                type: 'inline'
            },
            mainClass: 'mfp-move-from-top',
            removalDelay: 1000
        });
    }
};

//End Wrapper    
});